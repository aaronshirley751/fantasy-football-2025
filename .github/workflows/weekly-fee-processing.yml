name: Weekly Fantasy Football Fee Processing

on:
  # Run every Tuesday at 2 AM EST (after Monday Night Football)
  schedule:
    - cron: '0 7 * * 2'  # 7 AM UTC = 2 AM EST during standard time
  
  # Allow manual triggering with week number input
  workflow_dispatch:
    inputs:
      week_number:
        description: 'NFL Week Number to process'
        required: true
        default: '1'
        type: string
      league_id:
        description: 'League ID (leave default for 2025 live league)'
        required: false
        default: '1249067741470539776'
        type: string

jobs:
  process-weekly-fees:
    runs-on: ubuntu-latest
    name: Process Fantasy Football Fees
    env:
      # Fallbacks so the workflow still runs even if a secret is missing
      FALLBACK_FUNCTION_URL: https://jfeuobfjgqownybluvje.supabase.co/functions/v1/process-weekly-fees
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get current NFL week
      id: get-week
      run: |
        # Calculate current NFL week based on date
        if [ "${{ github.event.inputs.week_number }}" != "" ]; then
          echo "week=${{ github.event.inputs.week_number }}" >> $GITHUB_OUTPUT
        else
          # Simple calculation: Kickoff week starts September 4, 2025 (Thu)
          start_date="2025-09-04"
          current_date=$(date +%Y-%m-%d)
          days_diff=$(( ($(date -d "$current_date" +%s) - $(date -d "$start_date" +%s)) / 86400 ))
          week_number=$(( days_diff / 7 + 1 ))
          
          # Cap at week 18 (regular season)
          if [ $week_number -gt 18 ]; then
            week_number=18
          fi
          if [ $week_number -lt 1 ]; then
            week_number=1
          fi
          
          echo "week=$week_number" >> $GITHUB_OUTPUT
        fi
    
    - name: Debug Database Setup
      run: |
        echo "🔍 Checking database state..."
        
        # First check what's in the database
        debug_response=$(curl -s -X POST "https://jfeuobfjgqownybluvje.supabase.co/functions/v1/setup-league" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
          -d '{}')
        
        echo "Database Debug Response:"
        echo "$debug_response"
        
        # Setup league if needed
        echo "🛠️ Setting up league configuration..."
        setup_response=$(curl -s -X POST "https://jfeuobfjgqownybluvje.supabase.co/functions/v1/setup-league" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
          -d '{"action": "setup_league"}')
        
        echo "Setup Response:"
        echo "$setup_response"
    
    - name: Process Weekly Fees
      run: |
        echo "Processing fees for Week ${{ steps.get-week.outputs.week }}"
        
        # Prefer secret URL; fall back to known project URL if unset
        FUNCTION_URL="${{ secrets.SUPABASE_FUNCTION_URL }}"
        if [ -z "$FUNCTION_URL" ]; then
          FUNCTION_URL="$FALLBACK_FUNCTION_URL"
        fi

        # Use provided input league_id when manually dispatched; otherwise default to 2025 live league
        LEAGUE_ID="${{ github.event.inputs.league_id }}"
        if [ -z "$LEAGUE_ID" ]; then
          LEAGUE_ID='1249067741470539776'
        fi

        response=$(curl -s -X POST "$FUNCTION_URL" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
          -d "{\n            \"week_number\": ${{ steps.get-week.outputs.week }},\n            \"league_id\": \"$LEAGUE_ID\"\n          }")
        
        echo "Function Response:"
        echo "$response"
        
        # Check if the response contains an error
        if echo "$response" | grep -q '"error"'; then
          echo "❌ Error processing fees"
          echo "$response"
          exit 1
        else
          echo "✅ Fees processed successfully"
        fi
    
    - name: Create Processing Summary
      if: success()
      run: |
        # Recompute league id for this step
        LEAGUE_ID="${{ github.event.inputs.league_id }}"
        if [ -z "$LEAGUE_ID" ]; then
          LEAGUE_ID='1249067741470539776'
        fi

        echo "## ✅ Week ${{ steps.get-week.outputs.week }} Fee Processing Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **League ID**: $LEAGUE_ID" >> $GITHUB_STEP_SUMMARY
        echo "- **Week Number**: ${{ steps.get-week.outputs.week }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Processed At**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check your Discord channel for the fee summary!" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify on Failure
      if: failure()
      run: |
        # Recompute league id for this step
        LEAGUE_ID="${{ github.event.inputs.league_id }}"
        if [ -z "$LEAGUE_ID" ]; then
          LEAGUE_ID='1249067741470539776'
        fi

        echo "## ❌ Week ${{ steps.get-week.outputs.week }} Fee Processing Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **League ID**: $LEAGUE_ID" >> $GITHUB_STEP_SUMMARY
        echo "- **Week Number**: ${{ steps.get-week.outputs.week }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Failed At**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the logs above for error details." >> $GITHUB_STEP_SUMMARY
